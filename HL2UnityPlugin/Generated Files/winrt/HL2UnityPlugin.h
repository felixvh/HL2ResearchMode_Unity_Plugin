// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.200729.8

#ifndef WINRT_HL2UnityPlugin_H
#define WINRT_HL2UnityPlugin_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.200729.8"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.200729.8"
#include "winrt/impl/Windows.Perception.Spatial.2.h"
#include "winrt/impl/HL2UnityPlugin.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(uint16_t) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetCenterDepth() const
    {
        uint16_t result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetCenterDepth(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<uint16_t>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetDepthMapBuffer() const
    {
        uint32_t result_impl_size{};
        uint16_t* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetDepthMapBuffer(&result_impl_size, &result));
        return com_array<uint16_t>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<uint8_t>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetDepthMapTextureBuffer() const
    {
        uint32_t result_impl_size{};
        uint8_t* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetDepthMapTextureBuffer(&result_impl_size, &result));
        return com_array<uint8_t>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<uint16_t>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetShortAbImageBuffer() const
    {
        uint32_t result_impl_size{};
        uint16_t* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetShortAbImageBuffer(&result_impl_size, &result));
        return com_array<uint16_t>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<uint8_t>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetShortAbImageTextureBuffer() const
    {
        uint32_t result_impl_size{};
        uint8_t* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetShortAbImageTextureBuffer(&result_impl_size, &result));
        return com_array<uint8_t>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<float>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetPointCloudBuffer() const
    {
        uint32_t result_impl_size{};
        float* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetPointCloudBuffer(&result_impl_size, &result));
        return com_array<float>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<float>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetRigidNodePose() const
    {
        uint32_t result_impl_size{};
        float* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetRigidNodePose(&result_impl_size, &result));
        return com_array<float>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<uint16_t>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetLongDepthMapBuffer() const
    {
        uint32_t result_impl_size{};
        uint16_t* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetLongDepthMapBuffer(&result_impl_size, &result));
        return com_array<uint16_t>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<uint8_t>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetLongDepthMapTextureBuffer() const
    {
        uint32_t result_impl_size{};
        uint8_t* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetLongDepthMapTextureBuffer(&result_impl_size, &result));
        return com_array<uint8_t>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<uint8_t>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetLFCameraBuffer() const
    {
        uint32_t result_impl_size{};
        uint8_t* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetLFCameraBuffer(&result_impl_size, &result));
        return com_array<uint8_t>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<uint8_t>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetRFCameraBuffer() const
    {
        uint32_t result_impl_size{};
        uint8_t* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetRFCameraBuffer(&result_impl_size, &result));
        return com_array<uint8_t>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<float>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetCenterPoint() const
    {
        uint32_t result_impl_size{};
        float* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetCenterPoint(&result_impl_size, &result));
        return com_array<float>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(com_array<float>) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetDepthSensorPosition() const
    {
        uint32_t result_impl_size{};
        float* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetDepthSensorPosition(&result_impl_size, &result));
        return com_array<float>{ result, result_impl_size, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(int32_t) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetDepthBufferSize() const
    {
        int32_t result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetDepthBufferSize(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(int32_t) consume_HL2UnityPlugin_IHL2ResearchMode<D>::GetLongDepthBufferSize() const
    {
        int32_t result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->GetLongDepthBufferSize(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_HL2UnityPlugin_IHL2ResearchMode<D>::PrintDepthResolution() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->PrintDepthResolution(&result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_HL2UnityPlugin_IHL2ResearchMode<D>::PrintDepthExtrinsics() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->PrintDepthExtrinsics(&result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_HL2UnityPlugin_IHL2ResearchMode<D>::PrintLFResolution() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->PrintLFResolution(&result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_HL2UnityPlugin_IHL2ResearchMode<D>::PrintLFExtrinsics() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->PrintLFExtrinsics(&result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_HL2UnityPlugin_IHL2ResearchMode<D>::PrintRFResolution() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->PrintRFResolution(&result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(hstring) consume_HL2UnityPlugin_IHL2ResearchMode<D>::PrintRFExtrinsics() const
    {
        void* result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->PrintRFExtrinsics(&result));
        return hstring{ result, take_ownership_from_abi };
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_HL2UnityPlugin_IHL2ResearchMode<D>::DepthMapTextureUpdated() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->DepthMapTextureUpdated(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_HL2UnityPlugin_IHL2ResearchMode<D>::ShortAbImageTextureUpdated() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->ShortAbImageTextureUpdated(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_HL2UnityPlugin_IHL2ResearchMode<D>::PointCloudUpdated() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->PointCloudUpdated(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_HL2UnityPlugin_IHL2ResearchMode<D>::LongDepthMapTextureUpdated() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->LongDepthMapTextureUpdated(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_HL2UnityPlugin_IHL2ResearchMode<D>::LFImageUpdated() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->LFImageUpdated(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(bool) consume_HL2UnityPlugin_IHL2ResearchMode<D>::RFImageUpdated() const
    {
        bool result{};
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->RFImageUpdated(&result));
        return result;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::InitializeDepthSensor() const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->InitializeDepthSensor());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::InitializeLongDepthSensor() const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->InitializeLongDepthSensor());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::InitializeSpatialCamerasFront() const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->InitializeSpatialCamerasFront());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::StartDepthSensorLoop() const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->StartDepthSensorLoop());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::StartLongDepthSensorLoop() const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->StartLongDepthSensorLoop());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::StartSpatialCamerasFrontLoop() const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->StartSpatialCamerasFrontLoop());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::StopAllSensorDevice() const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->StopAllSensorDevice());
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::SetReferenceCoordinateSystem(Windows::Perception::Spatial::SpatialCoordinateSystem const& refCoord) const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->SetReferenceCoordinateSystem(*(void**)(&refCoord)));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::SetPointCloudRoiInSpace(float centerX, float centerY, float centerZ, float boundX, float boundY, float boundZ) const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->SetPointCloudRoiInSpace(centerX, centerY, centerZ, boundX, boundY, boundZ));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_HL2UnityPlugin_IHL2ResearchMode<D>::SetPointCloudDepthOffset(uint16_t offset) const
    {
        check_hresult(WINRT_IMPL_SHIM(HL2UnityPlugin::IHL2ResearchMode)->SetPointCloudDepthOffset(offset));
    }
    template <typename D>
    struct produce<D, HL2UnityPlugin::IHL2ResearchMode> : produce_base<D, HL2UnityPlugin::IHL2ResearchMode>
    {
        int32_t __stdcall GetCenterDepth(uint16_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint16_t>(this->shim().GetCenterDepth());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDepthMapBuffer(uint32_t* __resultSize, uint16_t** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetDepthMapBuffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDepthMapTextureBuffer(uint32_t* __resultSize, uint8_t** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetDepthMapTextureBuffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetShortAbImageBuffer(uint32_t* __resultSize, uint16_t** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetShortAbImageBuffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetShortAbImageTextureBuffer(uint32_t* __resultSize, uint8_t** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetShortAbImageTextureBuffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetPointCloudBuffer(uint32_t* __resultSize, float** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetPointCloudBuffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRigidNodePose(uint32_t* __resultSize, float** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetRigidNodePose());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLongDepthMapBuffer(uint32_t* __resultSize, uint16_t** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetLongDepthMapBuffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLongDepthMapTextureBuffer(uint32_t* __resultSize, uint8_t** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetLongDepthMapTextureBuffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLFCameraBuffer(uint32_t* __resultSize, uint8_t** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetLFCameraBuffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetRFCameraBuffer(uint32_t* __resultSize, uint8_t** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetRFCameraBuffer());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetCenterPoint(uint32_t* __resultSize, float** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetCenterPoint());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDepthSensorPosition(uint32_t* __resultSize, float** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetDepthSensorPosition());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetDepthBufferSize(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<int32_t>(this->shim().GetDepthBufferSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall GetLongDepthBufferSize(int32_t* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<int32_t>(this->shim().GetLongDepthBufferSize());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PrintDepthResolution(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().PrintDepthResolution());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PrintDepthExtrinsics(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().PrintDepthExtrinsics());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PrintLFResolution(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().PrintLFResolution());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PrintLFExtrinsics(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().PrintLFExtrinsics());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PrintRFResolution(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().PrintRFResolution());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PrintRFExtrinsics(void** result) noexcept final try
        {
            clear_abi(result);
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().PrintRFExtrinsics());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall DepthMapTextureUpdated(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().DepthMapTextureUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall ShortAbImageTextureUpdated(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().ShortAbImageTextureUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall PointCloudUpdated(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().PointCloudUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LongDepthMapTextureUpdated(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().LongDepthMapTextureUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall LFImageUpdated(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().LFImageUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall RFImageUpdated(bool* result) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().RFImageUpdated());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall InitializeDepthSensor() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InitializeDepthSensor();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall InitializeLongDepthSensor() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InitializeLongDepthSensor();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall InitializeSpatialCamerasFront() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().InitializeSpatialCamerasFront();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall StartDepthSensorLoop() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StartDepthSensorLoop();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall StartLongDepthSensorLoop() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StartLongDepthSensorLoop();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall StartSpatialCamerasFrontLoop() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StartSpatialCamerasFrontLoop();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall StopAllSensorDevice() noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().StopAllSensorDevice();
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetReferenceCoordinateSystem(void* refCoord) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetReferenceCoordinateSystem(*reinterpret_cast<Windows::Perception::Spatial::SpatialCoordinateSystem const*>(&refCoord));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetPointCloudRoiInSpace(float centerX, float centerY, float centerZ, float boundX, float boundY, float boundZ) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPointCloudRoiInSpace(centerX, centerY, centerZ, boundX, boundY, boundZ);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall SetPointCloudDepthOffset(uint16_t offset) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SetPointCloudDepthOffset(offset);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::HL2UnityPlugin
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::HL2UnityPlugin::IHL2ResearchMode> : winrt::impl::hash_base {};
    template<> struct hash<winrt::HL2UnityPlugin::HL2ResearchMode> : winrt::impl::hash_base {};
#endif
}
#endif
